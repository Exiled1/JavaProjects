	Introductions:

		Your First Program:
		
		
	public static void main (String[] args){
			System.out.println("Hello World!");
		}


		Important things in this:
	
	{} - are brackets, you already know what brackets are for but for the rest of the class
	that doesn't know what they are: Anything inside of the brackets is code that will
	be run when you actually, well, run the code.

	--------------------------------------------------------------------------------

		Strings:

	"Hello World" 

	Strings are sequences of characters. In Java strings are enclosed in double quotation
	marks "".

	Not ''s, those are used for char values, which I'll go into later.

	--------------------------------------------------------------------------------

		Escape Sequences:

	Escape sequences make it so that certain things are keyed into Java, to use them out of the actual
	use that they normally have you use this thing called an escape sequence, which is this: \

	The list of usable escape sequences are these:

	\n - The newline ES: This makes it so that if you want to make a new line inside of a string ("")
	you use this

	--------------------------------------------------------------------------------	

		Identifiers:

	Identifiers are just names that you add to stuff like classes, etc.
	- Good identifier convention is seomthing that explains the overall use of the method, class, etc.

	Ex:
		- visionSystem (Good, short, concise, and helps me know what stuff does)

		- thisExplainsEverythingInThisClassAndCode (Bad, way too long)

	There are certain illegal starts to identifiers. You can't start with a number, a keyword
	or have a character inside of the name.

	--------------------------------------------------------------------------------	

		Java naming styles:

	For these you use camelCase, which regular code does stuff for, that made no sense, sooo, here:

	goodNamingConvention -used for regular tokens and stuff of the sort

	THIS_IS_A_CONSTANT -that kind of convention is used for constants

	ThisIsAClass -Well, the way I learned it was that this is used for a class.


	--------------------------------------------------------------------------------

		Bugs:

	There are certian times (a lot of times) when your code doesnt actually work, and they normally fall
	under a lot of categories, one of them jst happens to be this thing called a logical error.

		Logical Errors:
		
	- Logical errors are where the actual logic of the code doesn't work out in practice, which happens
	quite a lot.

		Syntax Errors:

	- Syntax errors are mistakes with misspelled words, misspelled characters, randomly placed or
	forgotten semicolons (;), and a bunch of other crap that you'll just figure out over the time you
	program.

	--------------------------------------------------------------------------------

		Objectives for 9/5/2018:

		Algorithms:

	Algorithm: A list of steps for solving problems.

	+---------------+
	|		|
	|		|
	|		|
	+---------------+
			\
			 \
			+---------------+ 
			|		| 
			|		| 
			|		| 
			+---------------+ 
		


		Static Methods:
	
	Static methods: A named group of statements


		using static methods:

	- Define / Declare the method

	- Call or run the method

	- *Insider Tip* The main method always runs first

	--------------------------------------------------------------------------------
	
		Data types:

	- Two data type groups in Java:
		> int, double, char, boolean
	
	- Objects:
		> String, .... - And stuff we deal with later.

	Char Data type:

	- Makes it so that you're able to use characters as a data type

	Boolean:
	- Describes a logical value, it can be either true or false. (1/0)

	--------------------------------------------------------------------------------

		Variables!!!
	- A piece of the computer's memory that is given a name and type and can store a
	value

	There are a couple steps for this:

		1) Declaring the variable:
	
	Syntax:
	
		<type> <variable name>;

	Please please please make a variable:

		- Short and concise, no paragraphs for variables.
		- Relevant to the actual context of the program.
		- NOT A SINGLE FLIPPIN LETTER, IF YOU WRITE CODE AND CAN'T EXPLAIN WHAT
		EVERYTHING DOES, REWRITE IT please.

	Step 3: Using the variable:

		
	--------------------------------------------------------------------------------		


		For Loops!!!!!

	- for( int i = 1; i <= 10; i++){
	
	System.out.println("-----");
	System.out.println(i * i);
	}

	Okay, so, this is divided into 3 portions, the declaration of the variable i
	(Or the state)

	2) It then checks the conditions validity by using the statement i <= 10, so
	you'll be going through the loop a good amount of times, specifically after 10
	cycles.

	3) Finally, at the end of the first loop (i = 1) it'll then raise i by 1 (i++)


	--------------------------------------------------------------------------------

			Nested For Loops!!!


		- single loop:

	for(int i = 1; i <= 3; i++ {
		
			for(int j = 1; j <=3; j++){
			System.out.println("Happy programming today!!");
		} 
	}


	Oh, interesting thing, for the int = j thing that was going on for the second
	loop, it actually uninitializes j as an integer once it leaves the loop, so
	it just clears the data in j and leaves it as 0 once it ends.

	--------------------------------------------------------------------------------

		Variable scoping:

	- Don't try to use variables outside of their methods (except for when you use
	the "this" keyword in Java)

	- You also shouldn't use variables outside of 


	--------------------------------------------------------------------------------


		Pseudo-Code:

	- Okay, this is literally my favorite thing about any language, pseudo-code is
	actually a system to be able to break up a large problem into smaller, more
	manageable portions that you can program seperately, like, if someone asks you
	to make a program that prints an upside down triangle (********* all the way
	down to *) you're able to:

		- Break it down into the necessary portions, since there are 5 lines of
		the pyramid, you can turn it into a code snippet like this:

	~~~
	``` for( 1 to 5){
		print(line - 1){
		spaces
		}
		print ((5 lines) * 2 + 1) asterisk things // the 1 is so that you can
		// keep an array of 0 to be able to keep a thing
		make a newline (\n)
	```
	~~~

	Aaaaand then just program all that ish and you're good.


	--------------------------------------------------------------------------------


		Magic Numbers and Class constants!!!

	- Aaaalright, we're finally getting into some damn Object orientation, basically
	magic numbers refer to the number values that you have inside your code (5, or 1
	or 2), they're the values that are declared into your code that dont ever change
	anything.

	- You also use a new keyword!!! finals!!!
		> Finals are pretty much the de facto "DONT TOUCH ME DAMMIT" of java,
		finals make it impossible to change during run-time/at any point in time
		other than when it's first declared/initiated. 

	--------------------------------------------------------------------------------

		Parameters!!!!

	- Parameters are pretty much awesome, they allow you to pass, well, parameters
	(AKA "values") into a method that you've made before. Sya you have a specific
	method that 

	- Oh, also, DONT PUT A VARIABLE TYPE INSIDE THE FUNCTION CALL!!! Java (thank gods)
	wont let you do this, plus it'll just break your code and that's never fun.

